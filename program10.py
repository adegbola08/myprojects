"""
Write a class that represents a general Bank Account.
It should contain the first and last name of the user, the bank routing number, the account number, and balance.
Use a class to make three different instances: Checking, Saving, and Business.
Each account must have a unique identifier generated by the system (account number).
The account number should be 12 digits while the routing number 9 digit.
The routing number is the same for all the accounts while the account number changes depending on which account is used.
You can use the random library to generate the account number.
The user should be able to open any of the three accounts or all three.
The user should be able to deposit and withdrawal money.
Negative balance should be allowed but the user must be notified that the account will go in red.
You must provide solution for cents count and increment.
The user also should be allowed to transfer money from one account to another.
Keep the program running till the user wants to quit.
"""
# users cannot open same type of account more than once

lst = []
lst_AcctNo = []
lst_Amount = []


class Bank:
    account_no = 200006132532
    routing_no = 100032723

    def __init__(self, first, last, balance):
        self.firstname = first
        self.lastname = last
        self.balance = balance
        Bank.account_no += 264
        self.account_no = Bank.account_no
        self.routing_no = Bank.routing_no

    def fullname(self):
        fullname = self.firstname + " " + self.lastname
        return fullname.upper()

    def __repr__(self):
        pass


class Checking(Bank):
    def __init__(self, first, last, balance):
        super().__init__(first, last, balance)
        self.checking = "Checking"

    def account_type(self):
        return self.checking


class Savings(Bank):
    def __init__(self, first, last, balance):
        super().__init__(first, last, balance)
        self.savings = "Savings"

    def account_type(self):
        return self.savings


class Business(Bank):
    def __init__(self, first, last, balance):
        super().__init__(first,last,balance)
        self.business = "Business"

    def account_type(self):
        return self.business


def app():
    main()


def main():
    try:
        print("Hello, Welcome to Tella's Bank. We are committed to offering the best services to our customers")
        choice = int(input("What operation would you like to perform?\n1 - Open a Bank Account\n2 - Deposit Money\n3 "
                           "- Make Withdrawal\n4 - Check Account Balance\n5 - Transfer to Another Account"
                           "\n0 - To Exit Program\nEnter your choice: "))

        if choice == 1:
            open_account()
        elif choice == 2:
            deposit()
        elif choice == 3:
            withdrawal()
        elif choice == 4:
            check_balance()
        elif choice == 5:
            transfer()
        elif choice == 0:
            end_program()
        else:
            print("That is an unassigned number\n")
            main()

    except:
        print("That is not an integer\n")
        main()


def open_account():
    try:
        first = input("Enter your first name: ").lstrip().title()
        last = input("Enter your last name: ").lstrip().title()
        money = float(input("How much would you like to deposit into your account right away: "))
        acct_type = int(input("What type of account do you want to open?\n1 - Checking\n2 - Savings\n3 - Business"
                              "\nEnter your choice: "))

        if acct_type == 1:
            a = Checking(first, last, money)
            lst_Amount.append(money)
            lst_AcctNo.append(a.account_no)
            det = "Full-Name: {0}  Account Number: {1}  Routing Number: {2}  Account Type: {3}"
            det_pr = det.format(a.fullname(), a.account_no, a.routing_no, a.account_type())
            lst.append(det_pr)
            print(det_pr, "\n")
            main()

        elif acct_type == 2:
            b = Savings(first, last, money)
            lst_Amount.append(money)
            lst_AcctNo.append(b.account_no)
            det = "Full-Name: {0}  Account Number: {1}  Routing Number: {2}  Account Type: {3}"
            det_pr = det.format(b.fullname(), b.account_no, b.routing_no, b.account_type())
            lst.append(det_pr)
            print(det_pr, "\n")
            main()

        elif acct_type == 3:
            c = Business(first, last, money)
            lst_Amount.append(money)
            lst_AcctNo.append(c.account_no)
            det = "Full-Name: {0}  Account Number: {1}  Routing Number: {2}  Account Type: {3}"
            det_pr = det.format(c.fullname(), c.account_no, c.routing_no, c.account_type())
            lst.append(det_pr)
            print(det_pr, "\n")
            main()

        else:
            print("You Entered an Unassigned number. Please restart the form\n")
            open_account()

    except:
        print("Check that you're entering correct values\n")
        open_account()


def deposit():
    try:
        acct = int(input("\nDo you have an account with us?\n1 - Yes\n2 - No\nEnter your answer: "))
        if acct == 1:
            print("The Following are the account numbers linked to our bank")
            for i in range(len(lst)):
                print(str(i+1) + ".\t" + lst[i])
            print("\n")
            dep_acct = int(input("Enter the account number you would like to deposit into: "))
            if dep_acct in lst_AcctNo:
                a = lst_AcctNo.index(dep_acct)
                dep_val = int(input("How much do you want to deposit? "))
                lst_Amount[a] += dep_val
                print("DEPOSIT SUCCESSFUL\n")
                main()

            else:
                print("NO ACCOUNT FOUND TO BE LINKED WITH THE ACCOUNT NUMBER YOU ENTERED\n")
                main()

        elif acct == 2:
            print("Sorry, you have to first create an account with us\n")
            main()

        else:
            print("Please Enter an Assigned Number\n")
            deposit()

    except:
        print("That's a wrong input\n")
        deposit()


def withdrawal():
    try:
        acct = int(input("\nDo you have an account with us?\n1 - Yes\n2 - No\nEnter your answer: "))
        if acct == 1:
            print("The Following are the account numbers linked to our bank")
            for i in range(len(lst)):
                print(str(i + 1) + ".\t" + lst[i])
            print("\n")
            with_acct = int(input("Enter the account number you would like to withdraw from: "))
            if with_acct in lst_AcctNo:
                a = lst_AcctNo.index(with_acct)
                with_val = int(input("How much do you want to withdraw? "))
                if with_val > lst_Amount[a]:
                    low_bal = int(input("NOTE: YOUR BALANCE WOULD TURN NEGATIVE CAUSE YOU DON'T HAVE SUFFICIENT "
                                        "FUNDS!\n1 - To Accept\n2 - To decline\nEnter your choice: "))
                    if low_bal == 1:
                        lst_Amount[a] -= with_val
                        print("WITHDRAWAL SUCCESSFUL\n")
                        main()
                    elif low_bal == 2:
                        main()
                    else:
                        print("That is not assigned\n")
                        withdrawal()

                else:
                    lst_Amount[a] -= with_val
                    print("WITHDRAWAL SUCCESSFUL\n")
                    main()


            else:
                print("NO ACCOUNT FOUND TO BE LINKED WITH THE ACCOUNT NUMBER YOU ENTERED\n")
                main()

        elif acct == 2:
            print("Sorry, you have to first create an account with us\n")
            main()
        else:
            print("Please Enter an Assigned Number\n")
            withdrawal()

    except:
        print("That's a wrong input\n")
        withdrawal()


def check_balance():
    try:
        acct = int(input("\nDo you have an account with us?\n1 - Yes\n2 - No\nEnter your answer: "))
        if acct == 1:
            print("The Following are the account numbers linked to our bank")
            for i in range(len(lst)):
                print(str(i + 1) + ".\t" + lst[i])
            print("\n")
            bal_acct = int(input("Enter the account number you would like to check its balance: "))
            if bal_acct in lst_AcctNo:
                a = lst_AcctNo.index(bal_acct)
                print(lst[a])
                print("YOUR ACCOUNT BALANCE IS", lst_Amount[a], "\n")
                main()

            else:
                print("NO ACCOUNT FOUND TO BE LINKED WITH THE ACCOUNT NUMBER YOU ENTERED\n")
                main()

        elif acct == 2:
            print("Sorry, you have to first create an account with us\n")
            main()
        else:
            print("Please Enter an Assigned Number\n")
            check_balance()

    except:
        print("That's a wrong input\n")
        check_balance()


def transfer():
    try:
        acct = int(input("\nDo you have an account with us?\n1 - Yes\n2 - No\nEnter your answer: "))
        if acct == 1:
            print("The Following are the account numbers linked to our bank")
            for i in range(len(lst)):
                print(str(i + 1) + ".\t" + lst[i])
            print("\n")
            trans_acct = int(input("Enter the account number you would like to transfer from: "))
            if trans_acct in lst_AcctNo:
                receive_acct = int(input("Enter the receiver's account number: "))
                if receive_acct in lst_AcctNo:
                    trans_amount = int(input("How much would you like to transfer? "))
                    a = lst_AcctNo.index(trans_acct)
                    b = lst_AcctNo.index(receive_acct)
                    if trans_amount > lst_Amount[a]:
                        low_bal = int(input("NOTE: YOUR BALANCE WOULD TURN NEGATIVE AFTER THIS TRANSFER CAUSE YOU"
                                            " DON'T HAVE SUFFICIENT FUNDS!\n1 - To Accept\n2 - To decline"
                                            "\nEnter your choice: "))
                        if low_bal == 1:
                            lst_Amount[a] -= trans_amount
                            lst_Amount[b] += trans_amount
                            print("TRANSFER SUCCESSFUL\n")
                            main()
                        elif low_bal == 2:
                            main()
                        else:
                            print("That is not assigned\n")
                            transfer()
                    else:
                        lst_Amount[a] -= trans_amount
                        lst_Amount[b] += trans_amount
                        print("TRANSFER SUCCESSFUL!\n")
                        main()
                else:
                    print("THE RECEIVING ACCOUNT NUMBER ENTERED IS NOT LINKED TO OUR BANK")
                    transfer()

            else:
                print("NO ACCOUNT FOUND TO BE LINKED WITH THE ACCOUNT NUMBER YOU ENTERED\n")
                main()

        elif acct == 2:
            print("Sorry, you have to first create an account with us\n")
            main()
        else:
            print("Please Enter an Assigned Number\n")
            transfer()

    except:
        print("That's a wrong input\n")
        transfer()


def end_program():
    try:  # keeps the program running until user enters an integer
        k = int(input("\nAre you sure you want to Exit?\n1 - Continue\n0 - EXIT\nEnter your choice: "))
        if k == 0:
            print("Goodbye!!!")
        elif k == 1:
            main()
        else:
            print("That's not assigned")
            end_program()

    except:  # keeps the program running until user enters an integer
        print("Please enter an integer")
        end_program()


# Running Code
app()


"""
evaluate cents and dollars for money issues
"""